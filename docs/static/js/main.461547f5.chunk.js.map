{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GitGrid.js","hooks/useFetchGits.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GitGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACQ,0BAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,OAOT,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAjBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCJlBG,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPHK,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZN,EADY,iDACmCO,UAAUF,GAD7C,+DAECG,MAAMR,GAFP,cAEZS,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARxB,kBAYXY,GAZW,4CAAF,sDCKPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAa,IAAD,EACXrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAgBrC,OAVAC,qBAAW,WACPjB,EAAQC,GACHiB,MAAK,SAAAC,GACEH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAG3B,CAACb,IAEIc,EDZwBK,CAAanB,GAAhCU,EAFuB,EAE5BJ,KAAaO,EAFe,EAEfA,QAEpB,OACI,oCACA,wBAAIjB,UAAU,qCAAqCI,GACjDa,GAAW,uBAAGjB,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAGHc,EAAOF,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACIW,IAAKX,EAAIhB,IACLgB,UEfnBY,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,WADhB,mBACvB2C,EADuB,KACX5C,EADW,KAG9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ4C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,UCVtCuB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.461547f5.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n           setCategories(cats =>[inputValue,...cats]); \n           setInputValue('');\n        }\n        \n        //console.log('asdfsd');\n    }\n    return (\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={ handleInputChange }\n                />                \n            </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    //console.log(id,title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs= async(category) =>{\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=YDxTtqzHIivB1J36xh2B1A2msNZwhHHg`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGits';\n//import { getGifs } from '../helpers/getGifs';\n\nexport const GitGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n        <div className=\"card-grid\">     \n            \n                {\n                    images.map( (img) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            \n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) =>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () =>{\n        getGifs(category)\n            .then(imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n            })\n    },[category])\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GitGrid } from './components/GitGrid';\n//import PropTypes from 'prop-types'\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Cosmos']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/> \n        \n            <ol>\n                {\n                    categories.map( category =>(\n                        <GitGrid  \n                            key={category}\n                            category={category}\n                        />\n                        )\n                    )\n                }\n            </ol>\n        </>\n\n    );  \n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}